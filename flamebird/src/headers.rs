// flamebird/src/headers.rs

// 为 flamebird 标头明确定义的魔法场

// 定义一个公共的常量 FLAMEBIRD_MAGIC，类型为 32 位无符号整数
// 这个常量通常用于文件格式或协议的标识，在这里它的值是十六进制的 0x666C616D65
// 其作用可能是在解析文件或处理数据时，用来快速判断数据是否符合特定的格式
pub const FLAMEBIRD_MAGIC: u32 = 0x666C616D65;

// 格式版本定义为 u32，以便将来进一步处理

// 使用 #[repr(u32)] 注解，表明这个枚举类型在内存中的表示是 32 位无符号整数
// 这意味着枚举成员的值会被存储为 32 位无符号整数
#[repr(u32)]
// 定义一个公共的枚举类型 Version，用于表示不同的版本号
pub enum Version {
    // 定义一个枚举成员 V1，其值为 1
    // 这里可以根据需要添加更多的版本成员，每个成员代表一个特定的版本
    V1 = 1,
}

// 使用 #[repr(c)] 注解，确保这个结构体的内存布局和字段顺序与 C 语言中的结构体一致
// 这样可以方便与 C 代码进行交互，例如通过 FFI（Foreign Function Interface）调用 C 函数
#[repr(c)]
// 定义一个公共的结构体 AgnosticHeader，用于表示某种通用的头部信息
pub struct AgnosticHeader {
    // 定义一个长度为 4 的字节数组 magic，用于存储文件或数据的魔法数字
    // 魔法数字可以帮助识别文件格式，类似于前面定义的 FLAMEBIRD_MAGIC
    magic: [u8; 4],
    // 定义一个长度为 24 的字节数组 data，用于存储一些通用的数据
    // 具体存储什么数据取决于具体的应用场景
    data: [u8; 24],
    // 定义一个长度为 4 的字节数组 version，用于存储版本信息
    // 可能与前面定义的 Version 枚举类型相关联
    version: [u8; 4],
}
